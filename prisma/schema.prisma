// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id        String @id @default(auto()) @map("_id") @db.ObjectId
  email     String @unique
  firstName String
  lastName  String
  password  String

  phoneNo String?
  avatar  String?

  // true, false
  isActive          Boolean? @default(false)
  verificationToken String?
  isBanned          Boolean? @default(false)

  isNew Boolean? @default(true)
  role  String?  @default("user")

  // admin / sales / inventory / products / pos
  business_role String @default("sales")

  businesses  Business[] @relation(name: "admin")
  businessIds String[]   @db.ObjectId

  store   Business? @relation(name: "operation", fields: [storeId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  storeId String?   @db.ObjectId

  verifiedAt DateTime?
  createdAt  DateTime? @default(now())
  updatedAt  DateTime? @updatedAt
}

model Business {
  id       String  @id @default(auto()) @map("_id") @db.ObjectId
  name     String?
  phone    String?
  location String?
  city     String?
  state    String?
  zip      String?

  // True / False
  status Boolean @default(true)

  // True / False
  isDefault Boolean @default(true)

  admin   User   @relation(name: "admin", fields: [adminId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  adminId String @db.ObjectId

  operators   User[]   @relation(name: "operation")
  operatorIds String[] @db.ObjectId

  categories Category[]
  brands     Brand[]
  units      Unit[]
  variations Variation[]

  suppliers Supplier[]
  customers Customer[]
  sales     Sale[]
  purchase  Purchase[]

  createdAt DateTime? @default(now())
  updatedAt DateTime? @updatedAt
}

model Brand {
  id          String  @id @default(auto()) @map("_id") @db.ObjectId
  name        String?
  description String?

  business   Business @relation(fields: [businessId], references: [id])
  businessId String   @db.ObjectId

  status Boolean @default(true)

  createdAt DateTime? @default(now())
  updatedAt DateTime? @updatedAt
}

model Category {
  id          String  @id @default(auto()) @map("_id") @db.ObjectId
  name        String?
  description String?

  business   Business @relation(fields: [businessId], references: [id])
  businessId String   @db.ObjectId

  isSubcategory Boolean @default(false)

  parent   Category? @relation(name: "parent", fields: [parentId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  parentId String?   @db.ObjectId

  children Category[] @relation(name: "parent")

  status Boolean @default(true)

  createdAt DateTime? @default(now())
  updatedAt DateTime? @updatedAt
}

model Unit {
  id        String  @id @default(auto()) @map("_id") @db.ObjectId
  name      String?
  shortName String?

  business   Business @relation(fields: [businessId], references: [id])
  businessId String   @db.ObjectId

  status Boolean @default(true)

  createdAt DateTime? @default(now())
  updatedAt DateTime? @updatedAt
}

model Variation {
  id     String   @id @default(auto()) @map("_id") @db.ObjectId
  name   String?
  values String[]

  business   Business @relation(fields: [businessId], references: [id])
  businessId String   @db.ObjectId

  status Boolean @default(true)

  createdAt DateTime? @default(now())
  updatedAt DateTime? @updatedAt
}

model Supplier {
  id                String     @id @default(auto()) @map("_id") @db.ObjectId
  prefix            String?
  firstName         String?
  middleName        String?
  lastName          String?
  mobile            String?
  alternativeMobile String?
  landLine          String?
  email             String?
  taxNumber         String?
  addressOne        String?
  addressTwo        String?
  city              String?
  state             String?
  country           String?
  zipCode           String?
  purchases         Purchase[]

  status Boolean @default(true)

  business   Business @relation(fields: [businessId], references: [id])
  businessId String   @db.ObjectId

  description String?

  createdAt DateTime? @default(now())
  updatedAt DateTime? @updatedAt
}

model Customer {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  prefix            String?
  firstName         String?
  middleName        String?
  lastName          String?
  mobile            String?
  alternativeMobile String?
  landLine          String?
  email             String?
  taxNumber         String?
  addressOne        String?
  addressTwo        String?
  city              String?
  state             String?
  country           String?
  zipCode           String?
  sales             Sale[]

  status Boolean @default(true)

  business   Business @relation(fields: [businessId], references: [id])
  businessId String   @db.ObjectId

  description String?

  createdAt DateTime? @default(now())
  updatedAt DateTime? @updatedAt
}

model Sale {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  customer    Customer @relation(fields: [customerId], references: [id])
  customerId  String   @db.ObjectId
  quantity    Int
  totalAmount Int
  paid        Int
  due         Int

  status Boolean @default(true)

  business   Business @relation(fields: [businessId], references: [id])
  businessId String   @db.ObjectId

  description String?

  createdAt DateTime? @default(now())
  updatedAt DateTime? @updatedAt
}

model Purchase {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  supplier    Supplier @relation(fields: [supplierId], references: [id])
  supplierId  String   @db.ObjectId
  quantity    Int
  totalAmount Int
  paid        Int
  due         Int

  status Boolean @default(true)

  business   Business @relation(fields: [businessId], references: [id])
  businessId String   @db.ObjectId

  description String?

  createdAt DateTime? @default(now())
  updatedAt DateTime? @updatedAt
}
